# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:52:29+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AccountScope(Enum):
    PAYER = 'PAYER'
    LINKED = 'LINKED'


class AmortizedRecurringFee(RootModel[str]):
    root: str


class AmortizedUpfrontFee(RootModel[str]):
    root: str


class AnomalyFeedbackType(Enum):
    YES = 'YES'
    NO = 'NO'
    PLANNED_ACTIVITY = 'PLANNED_ACTIVITY'


class AnomalySubscriptionFrequency(Enum):
    DAILY = 'DAILY'
    IMMEDIATE = 'IMMEDIATE'
    WEEKLY = 'WEEKLY'


class Arn(
    RootModel[
        constr(
            pattern=r'arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+',
        min_length=20,
        max_length=2048,
    )


class AttributeType(RootModel[str]):
    root: str


class AttributeValue(RootModel[str]):
    root: str


class Attributes(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class BillExpirationException(RootModel[Any]):
    root: Any


class Context(Enum):
    COST_AND_USAGE = 'COST_AND_USAGE'
    RESERVATIONS = 'RESERVATIONS'
    SAVINGS_PLANS = 'SAVINGS_PLANS'


class CostAllocationTagStatus(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class CostAllocationTagType(Enum):
    AWSGenerated = 'AWSGenerated'
    UserDefined = 'UserDefined'


class CostAllocationTagsMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class CostCategoryInheritedValueDimensionName(Enum):
    LINKED_ACCOUNT_NAME = 'LINKED_ACCOUNT_NAME'
    TAG = 'TAG'


class CostCategoryMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class CostCategoryName(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50) = Field(
        ..., description='The unique name of the Cost Category.'
    )


class CostCategoryNamesList(RootModel[List[CostCategoryName]]):
    root: List[CostCategoryName]


class CostCategoryRuleType(Enum):
    REGULAR = 'REGULAR'
    INHERITED_VALUE = 'INHERITED_VALUE'


class CostCategoryRuleVersion(Enum):
    CostCategoryExpression_v1 = 'CostCategoryExpression.v1'


class CostCategorySplitChargeMethod(Enum):
    FIXED = 'FIXED'
    PROPORTIONAL = 'PROPORTIONAL'
    EVEN = 'EVEN'


class CostCategorySplitChargeRuleParameterType(Enum):
    ALLOCATION_PERCENTAGES = 'ALLOCATION_PERCENTAGES'


class CostCategoryStatus(Enum):
    PROCESSING = 'PROCESSING'
    APPLIED = 'APPLIED'


class CostCategoryStatusComponent(Enum):
    COST_EXPLORER = 'COST_EXPLORER'


class CostCategoryValue(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50) = Field(
        ..., description='The default value for the cost category.'
    )


class CostCategoryValuesList(RootModel[List[CostCategoryValue]]):
    root: List[CostCategoryValue]


class CoverageHoursPercentage(RootModel[str]):
    root: str


class CoverageNormalizedUnitsPercentage(RootModel[str]):
    root: str


class DataUnavailableException(RootModel[Any]):
    root: Any


class DeleteAnomalyMonitorResponse(BaseModel):
    pass


class DeleteAnomalySubscriptionResponse(BaseModel):
    pass


class DeleteCostCategoryDefinitionRequest(BaseModel):
    CostCategoryArn: Arn


class Dimension(Enum):
    AZ = 'AZ'
    INSTANCE_TYPE = 'INSTANCE_TYPE'
    LINKED_ACCOUNT = 'LINKED_ACCOUNT'
    LINKED_ACCOUNT_NAME = 'LINKED_ACCOUNT_NAME'
    OPERATION = 'OPERATION'
    PURCHASE_TYPE = 'PURCHASE_TYPE'
    REGION = 'REGION'
    SERVICE = 'SERVICE'
    SERVICE_CODE = 'SERVICE_CODE'
    USAGE_TYPE = 'USAGE_TYPE'
    USAGE_TYPE_GROUP = 'USAGE_TYPE_GROUP'
    RECORD_TYPE = 'RECORD_TYPE'
    OPERATING_SYSTEM = 'OPERATING_SYSTEM'
    TENANCY = 'TENANCY'
    SCOPE = 'SCOPE'
    PLATFORM = 'PLATFORM'
    SUBSCRIPTION_ID = 'SUBSCRIPTION_ID'
    LEGAL_ENTITY_NAME = 'LEGAL_ENTITY_NAME'
    DEPLOYMENT_OPTION = 'DEPLOYMENT_OPTION'
    DATABASE_ENGINE = 'DATABASE_ENGINE'
    CACHE_ENGINE = 'CACHE_ENGINE'
    INSTANCE_TYPE_FAMILY = 'INSTANCE_TYPE_FAMILY'
    BILLING_ENTITY = 'BILLING_ENTITY'
    RESERVATION_ID = 'RESERVATION_ID'
    RESOURCE_ID = 'RESOURCE_ID'
    RIGHTSIZING_TYPE = 'RIGHTSIZING_TYPE'
    SAVINGS_PLANS_TYPE = 'SAVINGS_PLANS_TYPE'
    SAVINGS_PLAN_ARN = 'SAVINGS_PLAN_ARN'
    PAYMENT_OPTION = 'PAYMENT_OPTION'
    AGREEMENT_END_DATE_TIME_AFTER = 'AGREEMENT_END_DATE_TIME_AFTER'
    AGREEMENT_END_DATE_TIME_BEFORE = 'AGREEMENT_END_DATE_TIME_BEFORE'
    INVOICING_ENTITY = 'INVOICING_ENTITY'
    ANOMALY_TOTAL_IMPACT_ABSOLUTE = 'ANOMALY_TOTAL_IMPACT_ABSOLUTE'
    ANOMALY_TOTAL_IMPACT_PERCENTAGE = 'ANOMALY_TOTAL_IMPACT_PERCENTAGE'


class Entity(RootModel[str]):
    root: str


class ErrorMessage(RootModel[str]):
    root: str


class Estimated(RootModel[bool]):
    root: bool


class FindingReasonCode(Enum):
    CPU_OVER_PROVISIONED = 'CPU_OVER_PROVISIONED'
    CPU_UNDER_PROVISIONED = 'CPU_UNDER_PROVISIONED'
    MEMORY_OVER_PROVISIONED = 'MEMORY_OVER_PROVISIONED'
    MEMORY_UNDER_PROVISIONED = 'MEMORY_UNDER_PROVISIONED'
    EBS_THROUGHPUT_OVER_PROVISIONED = 'EBS_THROUGHPUT_OVER_PROVISIONED'
    EBS_THROUGHPUT_UNDER_PROVISIONED = 'EBS_THROUGHPUT_UNDER_PROVISIONED'
    EBS_IOPS_OVER_PROVISIONED = 'EBS_IOPS_OVER_PROVISIONED'
    EBS_IOPS_UNDER_PROVISIONED = 'EBS_IOPS_UNDER_PROVISIONED'
    NETWORK_BANDWIDTH_OVER_PROVISIONED = 'NETWORK_BANDWIDTH_OVER_PROVISIONED'
    NETWORK_BANDWIDTH_UNDER_PROVISIONED = 'NETWORK_BANDWIDTH_UNDER_PROVISIONED'
    NETWORK_PPS_OVER_PROVISIONED = 'NETWORK_PPS_OVER_PROVISIONED'
    NETWORK_PPS_UNDER_PROVISIONED = 'NETWORK_PPS_UNDER_PROVISIONED'
    DISK_IOPS_OVER_PROVISIONED = 'DISK_IOPS_OVER_PROVISIONED'
    DISK_IOPS_UNDER_PROVISIONED = 'DISK_IOPS_UNDER_PROVISIONED'
    DISK_THROUGHPUT_OVER_PROVISIONED = 'DISK_THROUGHPUT_OVER_PROVISIONED'
    DISK_THROUGHPUT_UNDER_PROVISIONED = 'DISK_THROUGHPUT_UNDER_PROVISIONED'


class FindingReasonCodes(RootModel[List[FindingReasonCode]]):
    root: List[FindingReasonCode]


class GenerationExistsException(RootModel[Any]):
    root: Any


class GenerationStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    PROCESSING = 'PROCESSING'
    FAILED = 'FAILED'


class GenericBoolean(RootModel[bool]):
    root: bool


class GenericDouble(RootModel[float]):
    root: float


class GenericString(
    RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class Granularity(Enum):
    DAILY = 'DAILY'
    MONTHLY = 'MONTHLY'
    HOURLY = 'HOURLY'


class GroupDefinitionKey(
    RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class GroupDefinitionType(Enum):
    DIMENSION = 'DIMENSION'
    TAG = 'TAG'
    COST_CATEGORY = 'COST_CATEGORY'


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class Key(RootModel[str]):
    root: str


class Keys(RootModel[List[Key]]):
    root: List[Key]


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: Arn


class LookbackPeriodInDays(Enum):
    SEVEN_DAYS = 'SEVEN_DAYS'
    THIRTY_DAYS = 'THIRTY_DAYS'
    SIXTY_DAYS = 'SIXTY_DAYS'


class MatchOption(Enum):
    EQUALS = 'EQUALS'
    ABSENT = 'ABSENT'
    STARTS_WITH = 'STARTS_WITH'
    ENDS_WITH = 'ENDS_WITH'
    CONTAINS = 'CONTAINS'
    CASE_SENSITIVE = 'CASE_SENSITIVE'
    CASE_INSENSITIVE = 'CASE_INSENSITIVE'
    GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL'


class MatchOptions(RootModel[List[MatchOption]]):
    root: List[MatchOption]


class MaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Metric(Enum):
    BLENDED_COST = 'BLENDED_COST'
    UNBLENDED_COST = 'UNBLENDED_COST'
    AMORTIZED_COST = 'AMORTIZED_COST'
    NET_UNBLENDED_COST = 'NET_UNBLENDED_COST'
    NET_AMORTIZED_COST = 'NET_AMORTIZED_COST'
    USAGE_QUANTITY = 'USAGE_QUANTITY'
    NORMALIZED_USAGE_AMOUNT = 'NORMALIZED_USAGE_AMOUNT'


class MetricAmount(RootModel[str]):
    root: str


class MetricName(RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class MetricNames(RootModel[List[MetricName]]):
    root: List[MetricName]


class MetricUnit(RootModel[str]):
    root: str


class MetricValue(BaseModel):
    Amount: Optional[MetricAmount] = None
    Unit: Optional[MetricUnit] = None


class Metrics(RootModel[Optional[Dict[str, MetricValue]]]):
    root: Optional[Dict[str, MetricValue]] = None


class MonitorArnList(RootModel[List[Arn]]):
    root: List[Arn]


class MonitorDimension(Enum):
    SERVICE = 'SERVICE'


class MonitorType(Enum):
    DIMENSIONAL = 'DIMENSIONAL'
    CUSTOM = 'CUSTOM'


class NetRISavings(RootModel[str]):
    root: str


class NetworkResourceUtilization(BaseModel):
    NetworkInBytesPerSecond: Optional[GenericString] = None
    NetworkOutBytesPerSecond: Optional[GenericString] = None
    NetworkPacketsInPerSecond: Optional[GenericString] = None
    NetworkPacketsOutPerSecond: Optional[GenericString] = None


class NextPageToken(
    RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=8192)]
):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=8192)


class NonNegativeInteger(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NullableNonNegativeDouble(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class NumericOperator(Enum):
    EQUAL = 'EQUAL'
    GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL'
    LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL'
    GREATER_THAN = 'GREATER_THAN'
    LESS_THAN = 'LESS_THAN'
    BETWEEN = 'BETWEEN'


class OfferingClass(Enum):
    STANDARD = 'STANDARD'
    CONVERTIBLE = 'CONVERTIBLE'


class OnDemandCost(RootModel[str]):
    root: str


class OnDemandCostOfRIHoursUsed(RootModel[str]):
    root: str


class OnDemandHours(RootModel[str]):
    root: str


class OnDemandNormalizedUnits(RootModel[str]):
    root: str


class PageSize(RootModel[int]):
    root: int


class PaymentOption(Enum):
    NO_UPFRONT = 'NO_UPFRONT'
    PARTIAL_UPFRONT = 'PARTIAL_UPFRONT'
    ALL_UPFRONT = 'ALL_UPFRONT'
    LIGHT_UTILIZATION = 'LIGHT_UTILIZATION'
    MEDIUM_UTILIZATION = 'MEDIUM_UTILIZATION'
    HEAVY_UTILIZATION = 'HEAVY_UTILIZATION'


class PlatformDifference(Enum):
    HYPERVISOR = 'HYPERVISOR'
    NETWORK_INTERFACE = 'NETWORK_INTERFACE'
    STORAGE_INTERFACE = 'STORAGE_INTERFACE'
    INSTANCE_STORE_AVAILABILITY = 'INSTANCE_STORE_AVAILABILITY'
    VIRTUALIZATION_TYPE = 'VIRTUALIZATION_TYPE'


class PlatformDifferences(RootModel[List[PlatformDifference]]):
    root: List[PlatformDifference]


class PredictionIntervalLevel(RootModel[conint(ge=51, le=99)]):
    root: conint(ge=51, le=99)


class ProvideAnomalyFeedbackRequest(BaseModel):
    AnomalyId: GenericString
    Feedback: AnomalyFeedbackType


class ProvideAnomalyFeedbackResponse(BaseModel):
    AnomalyId: GenericString


class PurchasedHours(RootModel[str]):
    root: str


class PurchasedUnits(RootModel[str]):
    root: str


class RDSInstanceDetails(BaseModel):
    CurrentGeneration: Optional[GenericBoolean] = None
    DatabaseEdition: Optional[GenericString] = None
    DatabaseEngine: Optional[GenericString] = None
    DeploymentOption: Optional[GenericString] = None
    Family: Optional[GenericString] = None
    InstanceType: Optional[GenericString] = None
    LicenseModel: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    SizeFlexEligible: Optional[GenericBoolean] = None


class RICostForUnusedHours(RootModel[str]):
    root: str


class RealizedSavings(RootModel[str]):
    root: str


class RecommendationId(
    RootModel[
        constr(
            pattern=r'^[\S\s]{8}-[\S\s]{4}-[\S\s]{4}-[\S\s]{4}-[\S\s]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[\S\s]{8}-[\S\s]{4}-[\S\s]{4}-[\S\s]{4}-[\S\s]{12}$',
        min_length=36,
        max_length=36,
    )


class RecommendationIdList(RootModel[List[RecommendationId]]):
    root: List[RecommendationId]


class RecommendationTarget(Enum):
    SAME_INSTANCE_FAMILY = 'SAME_INSTANCE_FAMILY'
    CROSS_INSTANCE_FAMILY = 'CROSS_INSTANCE_FAMILY'


class RedshiftInstanceDetails(BaseModel):
    CurrentGeneration: Optional[GenericBoolean] = None
    Family: Optional[GenericString] = None
    NodeType: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    SizeFlexEligible: Optional[GenericBoolean] = None


class RequestChangedException(RootModel[Any]):
    root: Any


class ReservationGroupKey(RootModel[str]):
    root: str


class ReservationGroupValue(RootModel[str]):
    root: str


class ReservationPurchaseRecommendationMetadata(BaseModel):
    GenerationTimestamp: Optional[GenericString] = None
    RecommendationId: Optional[GenericString] = None


class ReservationPurchaseRecommendationSummary(BaseModel):
    CurrencyCode: Optional[GenericString] = None
    TotalEstimatedMonthlySavingsAmount: Optional[GenericString] = None
    TotalEstimatedMonthlySavingsPercentage: Optional[GenericString] = None


class ReservedHours(RootModel[str]):
    root: str


class ReservedNormalizedUnits(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceTagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class ResourceTagKeyList(RootModel[List[ResourceTagKey]]):
    root: List[ResourceTagKey] = Field(..., max_length=200, min_length=0)


class ResourceTagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class RightsizingRecommendationConfiguration(BaseModel):
    BenefitsConsidered: GenericBoolean
    RecommendationTarget_1: RecommendationTarget = Field(
        ..., alias='RecommendationTarget'
    )


class RightsizingRecommendationMetadata(BaseModel):
    AdditionalMetadata: Optional[GenericString] = None
    GenerationTimestamp: Optional[GenericString] = None
    LookbackPeriodInDays_1: Optional[LookbackPeriodInDays] = Field(
        None, alias='LookbackPeriodInDays'
    )
    RecommendationId: Optional[GenericString] = None


class RightsizingRecommendationSummary(BaseModel):
    EstimatedTotalMonthlySavingsAmount: Optional[GenericString] = None
    SavingsCurrencyCode: Optional[GenericString] = None
    SavingsPercentage: Optional[GenericString] = None
    TotalRecommendationCount: Optional[GenericString] = None


class RightsizingType(Enum):
    TERMINATE = 'TERMINATE'
    MODIFY = 'MODIFY'


class RootCause(BaseModel):
    LinkedAccount: Optional[GenericString] = None
    LinkedAccountName: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    Service: Optional[GenericString] = None
    UsageType: Optional[GenericString] = None


class RootCauses(RootModel[List[RootCause]]):
    root: List[RootCause]


class SavingsPlanArn(RootModel[str]):
    root: str


class SavingsPlansAmortizedCommitment(BaseModel):
    AmortizedRecurringCommitment: Optional[GenericString] = None
    AmortizedUpfrontCommitment: Optional[GenericString] = None
    TotalAmortizedCommitment: Optional[GenericString] = None


class SavingsPlansCoverageData(BaseModel):
    CoveragePercentage: Optional[GenericString] = None
    OnDemandCost: Optional[GenericString] = None
    SpendCoveredBySavingsPlans: Optional[GenericString] = None
    TotalCost: Optional[GenericString] = None


class SavingsPlansDataType(Enum):
    ATTRIBUTES = 'ATTRIBUTES'
    UTILIZATION = 'UTILIZATION'
    AMORTIZED_COMMITMENT = 'AMORTIZED_COMMITMENT'
    SAVINGS = 'SAVINGS'


class SavingsPlansDataTypes(RootModel[List[SavingsPlansDataType]]):
    root: List[SavingsPlansDataType]


class SavingsPlansDetails(BaseModel):
    InstanceFamily: Optional[GenericString] = None
    OfferingId: Optional[GenericString] = None
    Region: Optional[GenericString] = None


class SavingsPlansPurchaseRecommendationDetail(BaseModel):
    AccountId: Optional[GenericString] = None
    CurrencyCode: Optional[GenericString] = None
    CurrentAverageHourlyOnDemandSpend: Optional[GenericString] = None
    CurrentMaximumHourlyOnDemandSpend: Optional[GenericString] = None
    CurrentMinimumHourlyOnDemandSpend: Optional[GenericString] = None
    EstimatedAverageUtilization: Optional[GenericString] = None
    EstimatedMonthlySavingsAmount: Optional[GenericString] = None
    EstimatedOnDemandCost: Optional[GenericString] = None
    EstimatedOnDemandCostWithCurrentCommitment: Optional[GenericString] = None
    EstimatedROI: Optional[GenericString] = None
    EstimatedSPCost: Optional[GenericString] = None
    EstimatedSavingsAmount: Optional[GenericString] = None
    EstimatedSavingsPercentage: Optional[GenericString] = None
    HourlyCommitmentToPurchase: Optional[GenericString] = None
    SavingsPlansDetails_1: Optional[SavingsPlansDetails] = Field(
        None, alias='SavingsPlansDetails'
    )
    UpfrontCost: Optional[GenericString] = None


class SavingsPlansPurchaseRecommendationDetailList(
    RootModel[List[SavingsPlansPurchaseRecommendationDetail]]
):
    root: List[SavingsPlansPurchaseRecommendationDetail]


class SavingsPlansPurchaseRecommendationMetadata(BaseModel):
    AdditionalMetadata: Optional[GenericString] = None
    GenerationTimestamp: Optional[GenericString] = None
    RecommendationId: Optional[GenericString] = None


class SavingsPlansPurchaseRecommendationSummary(BaseModel):
    CurrencyCode: Optional[GenericString] = None
    CurrentOnDemandSpend: Optional[GenericString] = None
    DailyCommitmentToPurchase: Optional[GenericString] = None
    EstimatedMonthlySavingsAmount: Optional[GenericString] = None
    EstimatedOnDemandCostWithCurrentCommitment: Optional[GenericString] = None
    EstimatedROI: Optional[GenericString] = None
    EstimatedSavingsAmount: Optional[GenericString] = None
    EstimatedSavingsPercentage: Optional[GenericString] = None
    EstimatedTotalCost: Optional[GenericString] = None
    HourlyCommitmentToPurchase: Optional[GenericString] = None
    TotalRecommendationCount: Optional[GenericString] = None


class SavingsPlansSavings(BaseModel):
    NetSavings: Optional[GenericString] = None
    OnDemandCostEquivalent: Optional[GenericString] = None


class SavingsPlansUtilization(BaseModel):
    TotalCommitment: Optional[GenericString] = None
    UnusedCommitment: Optional[GenericString] = None
    UsedCommitment: Optional[GenericString] = None
    UtilizationPercentage: Optional[GenericString] = None


class SavingsPlansUtilizationAggregates(BaseModel):
    AmortizedCommitment: Optional[SavingsPlansAmortizedCommitment] = None
    Savings: Optional[SavingsPlansSavings] = None
    Utilization: SavingsPlansUtilization


class SavingsPlansUtilizationDetail(BaseModel):
    AmortizedCommitment: Optional[SavingsPlansAmortizedCommitment] = None
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Savings: Optional[SavingsPlansSavings] = None
    SavingsPlanArn_1: Optional[SavingsPlanArn] = Field(None, alias='SavingsPlanArn')
    Utilization: Optional[SavingsPlansUtilization] = None


class SavingsPlansUtilizationDetails(RootModel[List[SavingsPlansUtilizationDetail]]):
    root: List[SavingsPlansUtilizationDetail]


class SearchString(
    RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SortDefinitionKey(
    RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class StartSavingsPlansPurchaseRecommendationGenerationRequest(BaseModel):
    pass


class SubscriberAddress(
    RootModel[
        constr(
            pattern=r'(^[a-zA-Z0-9.!#$%&\'*+=?^_‘{|}~-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$)|(^arn:(aws[a-zA-Z-]*):sns:[a-zA-Z0-9-]+:[0-9]{12}:[a-zA-Z0-9_-]+(\.fifo)?$)',
            min_length=6,
            max_length=302,
        )
    ]
):
    root: constr(
        pattern=r'(^[a-zA-Z0-9.!#$%&\'*+=?^_‘{|}~-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$)|(^arn:(aws[a-zA-Z-]*):sns:[a-zA-Z0-9-]+:[0-9]{12}:[a-zA-Z0-9_-]+(\.fifo)?$)',
        min_length=6,
        max_length=302,
    )


class SubscriberStatus(Enum):
    CONFIRMED = 'CONFIRMED'
    DECLINED = 'DECLINED'


class SubscriberType(Enum):
    EMAIL = 'EMAIL'
    SNS = 'SNS'


class SupportedSavingsPlansType(Enum):
    COMPUTE_SP = 'COMPUTE_SP'
    EC2_INSTANCE_SP = 'EC2_INSTANCE_SP'
    SAGEMAKER_SP = 'SAGEMAKER_SP'


class TagKey(RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class TagList(RootModel[List[Entity]]):
    root: List[Entity]


class TagResourceResponse(BaseModel):
    pass


class TermInYears(Enum):
    ONE_YEAR = 'ONE_YEAR'
    THREE_YEARS = 'THREE_YEARS'


class TerminateRecommendationDetail(BaseModel):
    CurrencyCode: Optional[GenericString] = None
    EstimatedMonthlySavings: Optional[GenericString] = None


class TooManyTagsException(RootModel[Any]):
    root: Any


class TotalActualHours(RootModel[str]):
    root: str


class TotalActualUnits(RootModel[str]):
    root: str


class TotalAmortizedFee(RootModel[str]):
    root: str


class TotalImpactFilter(BaseModel):
    EndValue: Optional[GenericDouble] = None
    NumericOperator_1: NumericOperator = Field(..., alias='NumericOperator')
    StartValue: GenericDouble


class TotalPotentialRISavings(RootModel[str]):
    root: str


class TotalRunningHours(RootModel[str]):
    root: str


class TotalRunningNormalizedUnits(RootModel[str]):
    root: str


class UnknownMonitorException(RootModel[Any]):
    root: Any


class UnknownSubscriptionException(RootModel[Any]):
    root: Any


class UnrealizedSavings(RootModel[str]):
    root: str


class UnresolvableUsageUnitException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn: Arn
    ResourceTagKeys: ResourceTagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UnusedHours(RootModel[str]):
    root: str


class UnusedUnits(RootModel[str]):
    root: str


class UpdateAnomalyMonitorRequest(BaseModel):
    MonitorArn: GenericString
    MonitorName: Optional[GenericString] = None


class UpdateAnomalyMonitorResponse(BaseModel):
    MonitorArn: GenericString


class UpdateAnomalySubscriptionResponse(BaseModel):
    SubscriptionArn: GenericString


class UpdateCostAllocationTagsStatusError(BaseModel):
    Code: Optional[GenericString] = None
    Message: Optional[ErrorMessage] = None
    TagKey_1: Optional[TagKey] = Field(None, alias='TagKey')


class UpdateCostAllocationTagsStatusErrors(
    RootModel[List[UpdateCostAllocationTagsStatusError]]
):
    root: List[UpdateCostAllocationTagsStatusError] = Field(
        ..., max_length=20, min_length=0
    )


class UpdateCostAllocationTagsStatusResponse(BaseModel):
    Errors: Optional[UpdateCostAllocationTagsStatusErrors] = None


class UtilizationPercentage(RootModel[str]):
    root: str


class UtilizationPercentageInUnits(RootModel[str]):
    root: str


class Value(RootModel[constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)]):
    root: constr(pattern=r'[\S\s]*', min_length=0, max_length=1024)


class Values(RootModel[List[Value]]):
    root: List[Value]


class YearMonthDay(
    RootModel[
        constr(
            pattern=r'(\d{4}-\d{2}-\d{2})(T\d{2}:\d{2}:\d{2}Z)?',
            min_length=0,
            max_length=40,
        )
    ]
):
    root: constr(
        pattern=r'(\d{4}-\d{2}-\d{2})(T\d{2}:\d{2}:\d{2}Z)?',
        min_length=0,
        max_length=40,
    )


class ZonedDateTime(
    RootModel[
        constr(
            pattern=r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$',
            min_length=20,
            max_length=25,
        )
    ]
):
    root: constr(
        pattern=r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$',
        min_length=20,
        max_length=25,
    ) = Field(
        ..., description='The period of time that you want the usage and costs for.'
    )


class XAmzTarget(Enum):
    AWSInsightsIndexService_CreateAnomalyMonitor = (
        'AWSInsightsIndexService.CreateAnomalyMonitor'
    )


class XAmzTarget1(Enum):
    AWSInsightsIndexService_CreateAnomalySubscription = (
        'AWSInsightsIndexService.CreateAnomalySubscription'
    )


class XAmzTarget2(Enum):
    AWSInsightsIndexService_CreateCostCategoryDefinition = (
        'AWSInsightsIndexService.CreateCostCategoryDefinition'
    )


class XAmzTarget3(Enum):
    AWSInsightsIndexService_DeleteAnomalyMonitor = (
        'AWSInsightsIndexService.DeleteAnomalyMonitor'
    )


class XAmzTarget4(Enum):
    AWSInsightsIndexService_DeleteAnomalySubscription = (
        'AWSInsightsIndexService.DeleteAnomalySubscription'
    )


class XAmzTarget5(Enum):
    AWSInsightsIndexService_DeleteCostCategoryDefinition = (
        'AWSInsightsIndexService.DeleteCostCategoryDefinition'
    )


class XAmzTarget6(Enum):
    AWSInsightsIndexService_DescribeCostCategoryDefinition = (
        'AWSInsightsIndexService.DescribeCostCategoryDefinition'
    )


class XAmzTarget7(Enum):
    AWSInsightsIndexService_GetAnomalies = 'AWSInsightsIndexService.GetAnomalies'


class XAmzTarget8(Enum):
    AWSInsightsIndexService_GetAnomalyMonitors = (
        'AWSInsightsIndexService.GetAnomalyMonitors'
    )


class XAmzTarget9(Enum):
    AWSInsightsIndexService_GetAnomalySubscriptions = (
        'AWSInsightsIndexService.GetAnomalySubscriptions'
    )


class XAmzTarget10(Enum):
    AWSInsightsIndexService_GetCostAndUsage = 'AWSInsightsIndexService.GetCostAndUsage'


class XAmzTarget11(Enum):
    AWSInsightsIndexService_GetCostAndUsageWithResources = (
        'AWSInsightsIndexService.GetCostAndUsageWithResources'
    )


class XAmzTarget12(Enum):
    AWSInsightsIndexService_GetCostCategories = (
        'AWSInsightsIndexService.GetCostCategories'
    )


class XAmzTarget13(Enum):
    AWSInsightsIndexService_GetCostForecast = 'AWSInsightsIndexService.GetCostForecast'


class XAmzTarget14(Enum):
    AWSInsightsIndexService_GetDimensionValues = (
        'AWSInsightsIndexService.GetDimensionValues'
    )


class XAmzTarget15(Enum):
    AWSInsightsIndexService_GetReservationCoverage = (
        'AWSInsightsIndexService.GetReservationCoverage'
    )


class XAmzTarget16(Enum):
    AWSInsightsIndexService_GetReservationPurchaseRecommendation = (
        'AWSInsightsIndexService.GetReservationPurchaseRecommendation'
    )


class XAmzTarget17(Enum):
    AWSInsightsIndexService_GetReservationUtilization = (
        'AWSInsightsIndexService.GetReservationUtilization'
    )


class XAmzTarget18(Enum):
    AWSInsightsIndexService_GetRightsizingRecommendation = (
        'AWSInsightsIndexService.GetRightsizingRecommendation'
    )


class XAmzTarget19(Enum):
    AWSInsightsIndexService_GetSavingsPlansCoverage = (
        'AWSInsightsIndexService.GetSavingsPlansCoverage'
    )


class XAmzTarget20(Enum):
    AWSInsightsIndexService_GetSavingsPlansPurchaseRecommendation = (
        'AWSInsightsIndexService.GetSavingsPlansPurchaseRecommendation'
    )


class XAmzTarget21(Enum):
    AWSInsightsIndexService_GetSavingsPlansUtilization = (
        'AWSInsightsIndexService.GetSavingsPlansUtilization'
    )


class XAmzTarget22(Enum):
    AWSInsightsIndexService_GetSavingsPlansUtilizationDetails = (
        'AWSInsightsIndexService.GetSavingsPlansUtilizationDetails'
    )


class XAmzTarget23(Enum):
    AWSInsightsIndexService_GetTags = 'AWSInsightsIndexService.GetTags'


class XAmzTarget24(Enum):
    AWSInsightsIndexService_GetUsageForecast = (
        'AWSInsightsIndexService.GetUsageForecast'
    )


class XAmzTarget25(Enum):
    AWSInsightsIndexService_ListCostAllocationTags = (
        'AWSInsightsIndexService.ListCostAllocationTags'
    )


class XAmzTarget26(Enum):
    AWSInsightsIndexService_ListCostCategoryDefinitions = (
        'AWSInsightsIndexService.ListCostCategoryDefinitions'
    )


class XAmzTarget27(Enum):
    AWSInsightsIndexService_ListSavingsPlansPurchaseRecommendationGeneration = (
        'AWSInsightsIndexService.ListSavingsPlansPurchaseRecommendationGeneration'
    )


class XAmzTarget28(Enum):
    AWSInsightsIndexService_ListTagsForResource = (
        'AWSInsightsIndexService.ListTagsForResource'
    )


class XAmzTarget29(Enum):
    AWSInsightsIndexService_ProvideAnomalyFeedback = (
        'AWSInsightsIndexService.ProvideAnomalyFeedback'
    )


class XAmzTarget30(Enum):
    AWSInsightsIndexService_StartSavingsPlansPurchaseRecommendationGeneration = (
        'AWSInsightsIndexService.StartSavingsPlansPurchaseRecommendationGeneration'
    )


class XAmzTarget31(Enum):
    AWSInsightsIndexService_TagResource = 'AWSInsightsIndexService.TagResource'


class XAmzTarget32(Enum):
    AWSInsightsIndexService_UntagResource = 'AWSInsightsIndexService.UntagResource'


class XAmzTarget33(Enum):
    AWSInsightsIndexService_UpdateAnomalyMonitor = (
        'AWSInsightsIndexService.UpdateAnomalyMonitor'
    )


class XAmzTarget34(Enum):
    AWSInsightsIndexService_UpdateAnomalySubscription = (
        'AWSInsightsIndexService.UpdateAnomalySubscription'
    )


class XAmzTarget35(Enum):
    AWSInsightsIndexService_UpdateCostAllocationTagsStatus = (
        'AWSInsightsIndexService.UpdateCostAllocationTagsStatus'
    )


class XAmzTarget36(Enum):
    AWSInsightsIndexService_UpdateCostCategoryDefinition = (
        'AWSInsightsIndexService.UpdateCostCategoryDefinition'
    )


class AnomalyDateInterval(BaseModel):
    EndDate: Optional[YearMonthDay] = None
    StartDate: YearMonthDay


class AnomalyScore(BaseModel):
    CurrentScore: GenericDouble
    MaxScore: GenericDouble


class CostAllocationTag(BaseModel):
    Status: CostAllocationTagStatus
    TagKey_1: TagKey = Field(..., alias='TagKey')
    Type: CostAllocationTagType


class CostAllocationTagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=100, min_length=1)


class CostAllocationTagList(RootModel[List[CostAllocationTag]]):
    root: List[CostAllocationTag] = Field(..., max_length=100, min_length=0)


class CostAllocationTagStatusEntry(BaseModel):
    Status: CostAllocationTagStatus
    TagKey_1: TagKey = Field(..., alias='TagKey')


class CostAllocationTagStatusList(RootModel[List[CostAllocationTagStatusEntry]]):
    root: List[CostAllocationTagStatusEntry] = Field(..., max_length=20, min_length=1)


class CostCategoryInheritedValueDimension(BaseModel):
    DimensionKey: Optional[GenericString] = None
    DimensionName: Optional[CostCategoryInheritedValueDimensionName] = None


class CostCategoryProcessingStatus(BaseModel):
    Component: Optional[CostCategoryStatusComponent] = None
    Status: Optional[CostCategoryStatus] = None


class CostCategoryProcessingStatusList(RootModel[List[CostCategoryProcessingStatus]]):
    root: List[CostCategoryProcessingStatus]


class CostCategoryReference(BaseModel):
    CostCategoryArn: Optional[Arn] = None
    DefaultValue: Optional[CostCategoryValue] = None
    EffectiveEnd: Optional[ZonedDateTime] = None
    EffectiveStart: Optional[ZonedDateTime] = None
    Name: Optional[CostCategoryName] = None
    NumberOfRules: Optional[NonNegativeInteger] = None
    ProcessingStatus: Optional[CostCategoryProcessingStatusList] = None
    Values: Optional[CostCategoryValuesList] = None


class CostCategoryReferencesList(RootModel[List[CostCategoryReference]]):
    root: List[CostCategoryReference]


class CostCategorySplitChargeRuleParameterValuesList(RootModel[List[GenericString]]):
    root: List[GenericString] = Field(..., max_length=500, min_length=1)


class CostCategorySplitChargeRuleTargetsList(RootModel[List[GenericString]]):
    root: List[GenericString] = Field(..., max_length=500, min_length=1)


class CostCategoryValues(BaseModel):
    Key: Optional[CostCategoryName] = None
    MatchOptions_1: Optional[MatchOptions] = Field(None, alias='MatchOptions')
    Values_1: Optional[Values] = Field(None, alias='Values')


class CoverageCost(BaseModel):
    OnDemandCost_1: Optional[OnDemandCost] = Field(None, alias='OnDemandCost')


class CoverageHours(BaseModel):
    CoverageHoursPercentage_1: Optional[CoverageHoursPercentage] = Field(
        None, alias='CoverageHoursPercentage'
    )
    OnDemandHours_1: Optional[OnDemandHours] = Field(None, alias='OnDemandHours')
    ReservedHours_1: Optional[ReservedHours] = Field(None, alias='ReservedHours')
    TotalRunningHours_1: Optional[TotalRunningHours] = Field(
        None, alias='TotalRunningHours'
    )


class CoverageNormalizedUnits(BaseModel):
    CoverageNormalizedUnitsPercentage_1: Optional[CoverageNormalizedUnitsPercentage] = (
        Field(None, alias='CoverageNormalizedUnitsPercentage')
    )
    OnDemandNormalizedUnits_1: Optional[OnDemandNormalizedUnits] = Field(
        None, alias='OnDemandNormalizedUnits'
    )
    ReservedNormalizedUnits_1: Optional[ReservedNormalizedUnits] = Field(
        None, alias='ReservedNormalizedUnits'
    )
    TotalRunningNormalizedUnits_1: Optional[TotalRunningNormalizedUnits] = Field(
        None, alias='TotalRunningNormalizedUnits'
    )


class CreateAnomalyMonitorResponse(BaseModel):
    MonitorArn: GenericString


class CreateAnomalySubscriptionResponse(BaseModel):
    SubscriptionArn: GenericString


class CreateCostCategoryDefinitionResponse(BaseModel):
    CostCategoryArn: Optional[Arn] = None
    EffectiveStart: Optional[ZonedDateTime] = None


class DateInterval(BaseModel):
    End: YearMonthDay
    Start: YearMonthDay


class DeleteAnomalyMonitorRequest(BaseModel):
    MonitorArn: GenericString


class DeleteAnomalySubscriptionRequest(BaseModel):
    SubscriptionArn: GenericString


class DeleteCostCategoryDefinitionResponse(BaseModel):
    CostCategoryArn: Optional[Arn] = None
    EffectiveEnd: Optional[ZonedDateTime] = None


class DescribeCostCategoryDefinitionRequest(BaseModel):
    CostCategoryArn: Arn
    EffectiveOn: Optional[ZonedDateTime] = None


class DimensionValues(BaseModel):
    Key: Optional[Dimension] = None
    MatchOptions_1: Optional[MatchOptions] = Field(None, alias='MatchOptions')
    Values_1: Optional[Values] = Field(None, alias='Values')


class DimensionValuesWithAttributes(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Value_1: Optional[Value] = Field(None, alias='Value')


class DimensionValuesWithAttributesList(RootModel[List[DimensionValuesWithAttributes]]):
    root: List[DimensionValuesWithAttributes]


class DiskResourceUtilization(BaseModel):
    DiskReadBytesPerSecond: Optional[GenericString] = None
    DiskReadOpsPerSecond: Optional[GenericString] = None
    DiskWriteBytesPerSecond: Optional[GenericString] = None
    DiskWriteOpsPerSecond: Optional[GenericString] = None


class EBSResourceUtilization(BaseModel):
    EbsReadBytesPerSecond: Optional[GenericString] = None
    EbsReadOpsPerSecond: Optional[GenericString] = None
    EbsWriteBytesPerSecond: Optional[GenericString] = None
    EbsWriteOpsPerSecond: Optional[GenericString] = None


class EC2InstanceDetails(BaseModel):
    AvailabilityZone: Optional[GenericString] = None
    CurrentGeneration: Optional[GenericBoolean] = None
    Family: Optional[GenericString] = None
    InstanceType: Optional[GenericString] = None
    Platform: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    SizeFlexEligible: Optional[GenericBoolean] = None
    Tenancy: Optional[GenericString] = None


class EC2ResourceDetails(BaseModel):
    HourlyOnDemandRate: Optional[GenericString] = None
    InstanceType: Optional[GenericString] = None
    Memory: Optional[GenericString] = None
    NetworkPerformance: Optional[GenericString] = None
    Platform: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    Sku: Optional[GenericString] = None
    Storage: Optional[GenericString] = None
    Vcpu: Optional[GenericString] = None


class EC2ResourceUtilization(BaseModel):
    DiskResourceUtilization_1: Optional[DiskResourceUtilization] = Field(
        None, alias='DiskResourceUtilization'
    )
    EBSResourceUtilization_1: Optional[EBSResourceUtilization] = Field(
        None, alias='EBSResourceUtilization'
    )
    MaxCpuUtilizationPercentage: Optional[GenericString] = None
    MaxMemoryUtilizationPercentage: Optional[GenericString] = None
    MaxStorageUtilizationPercentage: Optional[GenericString] = None
    NetworkResourceUtilization_1: Optional[NetworkResourceUtilization] = Field(
        None, alias='NetworkResourceUtilization'
    )


class EC2Specification(BaseModel):
    OfferingClass_1: Optional[OfferingClass] = Field(None, alias='OfferingClass')


class ESInstanceDetails(BaseModel):
    CurrentGeneration: Optional[GenericBoolean] = None
    InstanceClass: Optional[GenericString] = None
    InstanceSize: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    SizeFlexEligible: Optional[GenericBoolean] = None


class ElastiCacheInstanceDetails(BaseModel):
    CurrentGeneration: Optional[GenericBoolean] = None
    Family: Optional[GenericString] = None
    NodeType: Optional[GenericString] = None
    ProductDescription: Optional[GenericString] = None
    Region: Optional[GenericString] = None
    SizeFlexEligible: Optional[GenericBoolean] = None


class ForecastResult(BaseModel):
    MeanValue: Optional[GenericString] = None
    PredictionIntervalLowerBound: Optional[GenericString] = None
    PredictionIntervalUpperBound: Optional[GenericString] = None
    TimePeriod: Optional[DateInterval] = None


class ForecastResultsByTime(RootModel[List[ForecastResult]]):
    root: List[ForecastResult]


class GenerationSummary(BaseModel):
    EstimatedCompletionTime: Optional[ZonedDateTime] = None
    GenerationCompletionTime: Optional[ZonedDateTime] = None
    GenerationStartedTime: Optional[ZonedDateTime] = None
    GenerationStatus_1: Optional[GenerationStatus] = Field(
        None, alias='GenerationStatus'
    )
    RecommendationId_1: Optional[RecommendationId] = Field(
        None, alias='RecommendationId'
    )


class GenerationSummaryList(RootModel[List[GenerationSummary]]):
    root: List[GenerationSummary]


class GetAnomaliesRequest(BaseModel):
    DateInterval: AnomalyDateInterval
    Feedback: Optional[AnomalyFeedbackType] = None
    MaxResults: Optional[PageSize] = None
    MonitorArn: Optional[GenericString] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    TotalImpact: Optional[TotalImpactFilter] = None


class GetAnomalyMonitorsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    MonitorArnList: Optional[Values] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')


class GetAnomalySubscriptionsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    MonitorArn: Optional[GenericString] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SubscriptionArnList: Optional[Values] = None


class GetCostCategoriesResponse(BaseModel):
    CostCategoryNames: Optional[CostCategoryNamesList] = None
    CostCategoryValues: Optional[CostCategoryValuesList] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    ReturnSize: PageSize
    TotalSize: PageSize


class GetCostForecastResponse(BaseModel):
    ForecastResultsByTime_1: Optional[ForecastResultsByTime] = Field(
        None, alias='ForecastResultsByTime'
    )
    Total: Optional[MetricValue] = None


class GetDimensionValuesResponse(BaseModel):
    DimensionValues: DimensionValuesWithAttributesList
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    ReturnSize: PageSize
    TotalSize: PageSize


class GetSavingsPlansUtilizationDetailsResponse(BaseModel):
    NextToken: Optional[NextPageToken] = None
    SavingsPlansUtilizationDetails_1: SavingsPlansUtilizationDetails = Field(
        ..., alias='SavingsPlansUtilizationDetails'
    )
    TimePeriod: DateInterval
    Total: Optional[SavingsPlansUtilizationAggregates] = None


class GetTagsResponse(BaseModel):
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    ReturnSize: PageSize
    Tags: TagList
    TotalSize: PageSize


class GetUsageForecastResponse(BaseModel):
    ForecastResultsByTime_1: Optional[ForecastResultsByTime] = Field(
        None, alias='ForecastResultsByTime'
    )
    Total: Optional[MetricValue] = None


class Group(BaseModel):
    Keys_1: Optional[Keys] = Field(None, alias='Keys')
    Metrics_1: Optional[Metrics] = Field(None, alias='Metrics')


class GroupDefinition(BaseModel):
    Key: Optional[GroupDefinitionKey] = None
    Type: Optional[GroupDefinitionType] = None


class GroupDefinitions(RootModel[List[GroupDefinition]]):
    root: List[GroupDefinition]


class Groups(RootModel[List[Group]]):
    root: List[Group]


class Impact(BaseModel):
    MaxImpact: GenericDouble
    TotalActualSpend: Optional[NullableNonNegativeDouble] = None
    TotalExpectedSpend: Optional[NullableNonNegativeDouble] = None
    TotalImpact: Optional[GenericDouble] = None
    TotalImpactPercentage: Optional[NullableNonNegativeDouble] = None


class InstanceDetails(BaseModel):
    EC2InstanceDetails_1: Optional[EC2InstanceDetails] = Field(
        None, alias='EC2InstanceDetails'
    )
    ESInstanceDetails_1: Optional[ESInstanceDetails] = Field(
        None, alias='ESInstanceDetails'
    )
    ElastiCacheInstanceDetails_1: Optional[ElastiCacheInstanceDetails] = Field(
        None, alias='ElastiCacheInstanceDetails'
    )
    RDSInstanceDetails_1: Optional[RDSInstanceDetails] = Field(
        None, alias='RDSInstanceDetails'
    )
    RedshiftInstanceDetails_1: Optional[RedshiftInstanceDetails] = Field(
        None, alias='RedshiftInstanceDetails'
    )


class ListCostAllocationTagsRequest(BaseModel):
    MaxResults: Optional[CostAllocationTagsMaxResults] = None
    NextToken: Optional[NextPageToken] = None
    Status: Optional[CostAllocationTagStatus] = None
    TagKeys: Optional[CostAllocationTagKeyList] = None
    Type: Optional[CostAllocationTagType] = None


class ListCostAllocationTagsResponse(BaseModel):
    CostAllocationTags: Optional[CostAllocationTagList] = None
    NextToken: Optional[NextPageToken] = None


class ListCostCategoryDefinitionsRequest(BaseModel):
    EffectiveOn: Optional[ZonedDateTime] = None
    MaxResults: Optional[CostCategoryMaxResults] = None
    NextToken: Optional[NextPageToken] = None


class ListCostCategoryDefinitionsResponse(BaseModel):
    CostCategoryReferences: Optional[CostCategoryReferencesList] = None
    NextToken: Optional[NextPageToken] = None


class ListSavingsPlansPurchaseRecommendationGenerationRequest(BaseModel):
    GenerationStatus_1: Optional[GenerationStatus] = Field(
        None, alias='GenerationStatus'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    PageSize: Optional[NonNegativeInteger] = None
    RecommendationIds: Optional[RecommendationIdList] = None


class ListSavingsPlansPurchaseRecommendationGenerationResponse(BaseModel):
    GenerationSummaryList_1: Optional[GenerationSummaryList] = Field(
        None, alias='GenerationSummaryList'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')


class ReservationAggregates(BaseModel):
    AmortizedRecurringFee_1: Optional[AmortizedRecurringFee] = Field(
        None, alias='AmortizedRecurringFee'
    )
    AmortizedUpfrontFee_1: Optional[AmortizedUpfrontFee] = Field(
        None, alias='AmortizedUpfrontFee'
    )
    NetRISavings_1: Optional[NetRISavings] = Field(None, alias='NetRISavings')
    OnDemandCostOfRIHoursUsed_1: Optional[OnDemandCostOfRIHoursUsed] = Field(
        None, alias='OnDemandCostOfRIHoursUsed'
    )
    PurchasedHours_1: Optional[PurchasedHours] = Field(None, alias='PurchasedHours')
    PurchasedUnits_1: Optional[PurchasedUnits] = Field(None, alias='PurchasedUnits')
    RICostForUnusedHours_1: Optional[RICostForUnusedHours] = Field(
        None, alias='RICostForUnusedHours'
    )
    RealizedSavings_1: Optional[RealizedSavings] = Field(None, alias='RealizedSavings')
    TotalActualHours_1: Optional[TotalActualHours] = Field(
        None, alias='TotalActualHours'
    )
    TotalActualUnits_1: Optional[TotalActualUnits] = Field(
        None, alias='TotalActualUnits'
    )
    TotalAmortizedFee_1: Optional[TotalAmortizedFee] = Field(
        None, alias='TotalAmortizedFee'
    )
    TotalPotentialRISavings_1: Optional[TotalPotentialRISavings] = Field(
        None, alias='TotalPotentialRISavings'
    )
    UnrealizedSavings_1: Optional[UnrealizedSavings] = Field(
        None, alias='UnrealizedSavings'
    )
    UnusedHours_1: Optional[UnusedHours] = Field(None, alias='UnusedHours')
    UnusedUnits_1: Optional[UnusedUnits] = Field(None, alias='UnusedUnits')
    UtilizationPercentage_1: Optional[UtilizationPercentage] = Field(
        None, alias='UtilizationPercentage'
    )
    UtilizationPercentageInUnits_1: Optional[UtilizationPercentageInUnits] = Field(
        None, alias='UtilizationPercentageInUnits'
    )


class ReservationPurchaseRecommendationDetail(BaseModel):
    AccountId: Optional[GenericString] = None
    AverageNormalizedUnitsUsedPerHour: Optional[GenericString] = None
    AverageNumberOfInstancesUsedPerHour: Optional[GenericString] = None
    AverageUtilization: Optional[GenericString] = None
    CurrencyCode: Optional[GenericString] = None
    EstimatedBreakEvenInMonths: Optional[GenericString] = None
    EstimatedMonthlyOnDemandCost: Optional[GenericString] = None
    EstimatedMonthlySavingsAmount: Optional[GenericString] = None
    EstimatedMonthlySavingsPercentage: Optional[GenericString] = None
    EstimatedReservationCostForLookbackPeriod: Optional[GenericString] = None
    InstanceDetails_1: Optional[InstanceDetails] = Field(None, alias='InstanceDetails')
    MaximumNormalizedUnitsUsedPerHour: Optional[GenericString] = None
    MaximumNumberOfInstancesUsedPerHour: Optional[GenericString] = None
    MinimumNormalizedUnitsUsedPerHour: Optional[GenericString] = None
    MinimumNumberOfInstancesUsedPerHour: Optional[GenericString] = None
    RecommendedNormalizedUnitsToPurchase: Optional[GenericString] = None
    RecommendedNumberOfInstancesToPurchase: Optional[GenericString] = None
    RecurringStandardMonthlyCost: Optional[GenericString] = None
    UpfrontCost: Optional[GenericString] = None


class ReservationPurchaseRecommendationDetails(
    RootModel[List[ReservationPurchaseRecommendationDetail]]
):
    root: List[ReservationPurchaseRecommendationDetail]


class ReservationUtilizationGroup(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Key: Optional[ReservationGroupKey] = None
    Utilization: Optional[ReservationAggregates] = None
    Value: Optional[ReservationGroupValue] = None


class ReservationUtilizationGroups(RootModel[List[ReservationUtilizationGroup]]):
    root: List[ReservationUtilizationGroup]


class ResourceDetails(BaseModel):
    EC2ResourceDetails_1: Optional[EC2ResourceDetails] = Field(
        None, alias='EC2ResourceDetails'
    )


class ResourceTag(BaseModel):
    Key: ResourceTagKey
    Value: ResourceTagValue


class ResourceTagList(RootModel[List[ResourceTag]]):
    root: List[ResourceTag] = Field(..., max_length=200, min_length=0)


class ResourceUtilization(BaseModel):
    EC2ResourceUtilization_1: Optional[EC2ResourceUtilization] = Field(
        None, alias='EC2ResourceUtilization'
    )


class ResultByTime(BaseModel):
    Estimated_1: Optional[Estimated] = Field(None, alias='Estimated')
    Groups_1: Optional[Groups] = Field(None, alias='Groups')
    TimePeriod: Optional[DateInterval] = None
    Total: Optional[Metrics] = None


class ResultsByTime(RootModel[List[ResultByTime]]):
    root: List[ResultByTime]


class SavingsPlansCoverage(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Coverage: Optional[SavingsPlansCoverageData] = None
    TimePeriod: Optional[DateInterval] = None


class SavingsPlansCoverages(RootModel[List[SavingsPlansCoverage]]):
    root: List[SavingsPlansCoverage]


class SavingsPlansPurchaseRecommendation(BaseModel):
    AccountScope_1: Optional[AccountScope] = Field(None, alias='AccountScope')
    LookbackPeriodInDays_1: Optional[LookbackPeriodInDays] = Field(
        None, alias='LookbackPeriodInDays'
    )
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    SavingsPlansPurchaseRecommendationDetails: Optional[
        SavingsPlansPurchaseRecommendationDetailList
    ] = None
    SavingsPlansPurchaseRecommendationSummary_1: Optional[
        SavingsPlansPurchaseRecommendationSummary
    ] = Field(None, alias='SavingsPlansPurchaseRecommendationSummary')
    SavingsPlansType: Optional[SupportedSavingsPlansType] = None
    TermInYears_1: Optional[TermInYears] = Field(None, alias='TermInYears')


class SavingsPlansUtilizationByTime(BaseModel):
    AmortizedCommitment: Optional[SavingsPlansAmortizedCommitment] = None
    Savings: Optional[SavingsPlansSavings] = None
    TimePeriod: DateInterval
    Utilization: SavingsPlansUtilization


class SavingsPlansUtilizationsByTime(RootModel[List[SavingsPlansUtilizationByTime]]):
    root: List[SavingsPlansUtilizationByTime]


class ServiceSpecification(BaseModel):
    EC2Specification_1: Optional[EC2Specification] = Field(
        None, alias='EC2Specification'
    )


class SortDefinition(BaseModel):
    Key: SortDefinitionKey
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class SortDefinitions(RootModel[List[SortDefinition]]):
    root: List[SortDefinition]


class StartSavingsPlansPurchaseRecommendationGenerationResponse(BaseModel):
    EstimatedCompletionTime: Optional[ZonedDateTime] = None
    GenerationStartedTime: Optional[ZonedDateTime] = None
    RecommendationId_1: Optional[RecommendationId] = Field(
        None, alias='RecommendationId'
    )


class Subscriber(BaseModel):
    Address: Optional[SubscriberAddress] = None
    Status: Optional[SubscriberStatus] = None
    Type: Optional[SubscriberType] = None


class Subscribers(RootModel[List[Subscriber]]):
    root: List[Subscriber]


class TagResourceRequest(BaseModel):
    ResourceArn: Arn
    ResourceTags: ResourceTagList


class TagValues(BaseModel):
    Key: Optional[TagKey] = None
    MatchOptions_1: Optional[MatchOptions] = Field(None, alias='MatchOptions')
    Values_1: Optional[Values] = Field(None, alias='Values')


class TagValuesList(RootModel[List[TagValues]]):
    root: List[TagValues]


class TargetInstance(BaseModel):
    CurrencyCode: Optional[GenericString] = None
    DefaultTargetInstance: Optional[GenericBoolean] = None
    EstimatedMonthlyCost: Optional[GenericString] = None
    EstimatedMonthlySavings: Optional[GenericString] = None
    ExpectedResourceUtilization: Optional[ResourceUtilization] = None
    PlatformDifferences_1: Optional[PlatformDifferences] = Field(
        None, alias='PlatformDifferences'
    )
    ResourceDetails_1: Optional[ResourceDetails] = Field(None, alias='ResourceDetails')


class TargetInstancesList(RootModel[List[TargetInstance]]):
    root: List[TargetInstance]


class UpdateCostAllocationTagsStatusRequest(BaseModel):
    CostAllocationTagsStatus: CostAllocationTagStatusList


class UpdateCostCategoryDefinitionResponse(BaseModel):
    CostCategoryArn: Optional[Arn] = None
    EffectiveStart: Optional[ZonedDateTime] = None


class UtilizationByTime(BaseModel):
    Groups: Optional[ReservationUtilizationGroups] = None
    TimePeriod: Optional[DateInterval] = None
    Total: Optional[ReservationAggregates] = None


class UtilizationsByTime(RootModel[List[UtilizationByTime]]):
    root: List[UtilizationByTime]


class Anomaly(BaseModel):
    AnomalyEndDate: Optional[YearMonthDay] = None
    AnomalyId: GenericString
    AnomalyScore_1: AnomalyScore = Field(..., alias='AnomalyScore')
    AnomalyStartDate: Optional[YearMonthDay] = None
    DimensionValue: Optional[GenericString] = None
    Feedback: Optional[AnomalyFeedbackType] = None
    Impact_1: Impact = Field(..., alias='Impact')
    MonitorArn: GenericString
    RootCauses_1: Optional[RootCauses] = Field(None, alias='RootCauses')


class CostCategorySplitChargeRuleParameter(BaseModel):
    Type: CostCategorySplitChargeRuleParameterType
    Values: CostCategorySplitChargeRuleParameterValuesList


class CostCategorySplitChargeRuleParametersList(
    RootModel[List[CostCategorySplitChargeRuleParameter]]
):
    root: List[CostCategorySplitChargeRuleParameter] = Field(
        ..., max_length=10, min_length=1
    )


class Coverage(BaseModel):
    CoverageCost_1: Optional[CoverageCost] = Field(None, alias='CoverageCost')
    CoverageHours_1: Optional[CoverageHours] = Field(None, alias='CoverageHours')
    CoverageNormalizedUnits_1: Optional[CoverageNormalizedUnits] = Field(
        None, alias='CoverageNormalizedUnits'
    )


class CurrentInstance(BaseModel):
    CurrencyCode: Optional[GenericString] = None
    InstanceName: Optional[GenericString] = None
    MonthlyCost: Optional[GenericString] = None
    OnDemandHoursInLookbackPeriod: Optional[GenericString] = None
    ReservationCoveredHoursInLookbackPeriod: Optional[GenericString] = None
    ResourceDetails_1: Optional[ResourceDetails] = Field(None, alias='ResourceDetails')
    ResourceId: Optional[GenericString] = None
    ResourceUtilization_1: Optional[ResourceUtilization] = Field(
        None, alias='ResourceUtilization'
    )
    SavingsPlansCoveredHoursInLookbackPeriod: Optional[GenericString] = None
    Tags: Optional[TagValuesList] = None
    TotalRunningHoursInLookbackPeriod: Optional[GenericString] = None


class GetCostAndUsageResponse(BaseModel):
    DimensionValueAttributes: Optional[DimensionValuesWithAttributesList] = None
    GroupDefinitions_1: Optional[GroupDefinitions] = Field(
        None, alias='GroupDefinitions'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    ResultsByTime_1: Optional[ResultsByTime] = Field(None, alias='ResultsByTime')


class GetCostAndUsageWithResourcesResponse(BaseModel):
    DimensionValueAttributes: Optional[DimensionValuesWithAttributesList] = None
    GroupDefinitions_1: Optional[GroupDefinitions] = Field(
        None, alias='GroupDefinitions'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    ResultsByTime_1: Optional[ResultsByTime] = Field(None, alias='ResultsByTime')


class GetReservationUtilizationResponse(BaseModel):
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    Total: Optional[ReservationAggregates] = None
    UtilizationsByTime_1: UtilizationsByTime = Field(..., alias='UtilizationsByTime')


class GetSavingsPlansCoverageResponse(BaseModel):
    NextToken: Optional[NextPageToken] = None
    SavingsPlansCoverages_1: SavingsPlansCoverages = Field(
        ..., alias='SavingsPlansCoverages'
    )


class GetSavingsPlansPurchaseRecommendationResponse(BaseModel):
    Metadata: Optional[SavingsPlansPurchaseRecommendationMetadata] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SavingsPlansPurchaseRecommendation_1: Optional[
        SavingsPlansPurchaseRecommendation
    ] = Field(None, alias='SavingsPlansPurchaseRecommendation')


class GetSavingsPlansUtilizationResponse(BaseModel):
    SavingsPlansUtilizationsByTime_1: Optional[SavingsPlansUtilizationsByTime] = Field(
        None, alias='SavingsPlansUtilizationsByTime'
    )
    Total: SavingsPlansUtilizationAggregates


class ListTagsForResourceResponse(BaseModel):
    ResourceTags: Optional[ResourceTagList] = None


class ModifyRecommendationDetail(BaseModel):
    TargetInstances: Optional[TargetInstancesList] = None


class ReservationCoverageGroup(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Coverage_1: Optional[Coverage] = Field(None, alias='Coverage')


class ReservationCoverageGroups(RootModel[List[ReservationCoverageGroup]]):
    root: List[ReservationCoverageGroup]


class ReservationPurchaseRecommendation(BaseModel):
    AccountScope_1: Optional[AccountScope] = Field(None, alias='AccountScope')
    LookbackPeriodInDays_1: Optional[LookbackPeriodInDays] = Field(
        None, alias='LookbackPeriodInDays'
    )
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    RecommendationDetails: Optional[ReservationPurchaseRecommendationDetails] = None
    RecommendationSummary: Optional[ReservationPurchaseRecommendationSummary] = None
    ServiceSpecification_1: Optional[ServiceSpecification] = Field(
        None, alias='ServiceSpecification'
    )
    TermInYears_1: Optional[TermInYears] = Field(None, alias='TermInYears')


class ReservationPurchaseRecommendations(
    RootModel[List[ReservationPurchaseRecommendation]]
):
    root: List[ReservationPurchaseRecommendation]


class RightsizingRecommendation(BaseModel):
    AccountId: Optional[GenericString] = None
    CurrentInstance_1: Optional[CurrentInstance] = Field(None, alias='CurrentInstance')
    FindingReasonCodes_1: Optional[FindingReasonCodes] = Field(
        None, alias='FindingReasonCodes'
    )
    ModifyRecommendationDetail_1: Optional[ModifyRecommendationDetail] = Field(
        None, alias='ModifyRecommendationDetail'
    )
    RightsizingType_1: Optional[RightsizingType] = Field(None, alias='RightsizingType')
    TerminateRecommendationDetail_1: Optional[TerminateRecommendationDetail] = Field(
        None, alias='TerminateRecommendationDetail'
    )


class RightsizingRecommendationList(RootModel[List[RightsizingRecommendation]]):
    root: List[RightsizingRecommendation]


class Anomalies(RootModel[List[Anomaly]]):
    root: List[Anomaly]


class CostCategorySplitChargeRule(BaseModel):
    Method: CostCategorySplitChargeMethod
    Parameters: Optional[CostCategorySplitChargeRuleParametersList] = None
    Source: GenericString
    Targets: CostCategorySplitChargeRuleTargetsList


class CostCategorySplitChargeRulesList(RootModel[List[CostCategorySplitChargeRule]]):
    root: List[CostCategorySplitChargeRule] = Field(..., max_length=10, min_length=1)


class CoverageByTime(BaseModel):
    Groups: Optional[ReservationCoverageGroups] = None
    TimePeriod: Optional[DateInterval] = None
    Total: Optional[Coverage] = None


class CoveragesByTime(RootModel[List[CoverageByTime]]):
    root: List[CoverageByTime]


class GetAnomaliesResponse(BaseModel):
    Anomalies_1: Anomalies = Field(..., alias='Anomalies')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')


class GetReservationCoverageResponse(BaseModel):
    CoveragesByTime_1: CoveragesByTime = Field(..., alias='CoveragesByTime')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    Total: Optional[Coverage] = None


class GetReservationPurchaseRecommendationResponse(BaseModel):
    Metadata: Optional[ReservationPurchaseRecommendationMetadata] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    Recommendations: Optional[ReservationPurchaseRecommendations] = None


class GetRightsizingRecommendationResponse(BaseModel):
    Configuration: Optional[RightsizingRecommendationConfiguration] = None
    Metadata: Optional[RightsizingRecommendationMetadata] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    RightsizingRecommendations: Optional[RightsizingRecommendationList] = None
    Summary: Optional[RightsizingRecommendationSummary] = None


class AnomalyMonitor(BaseModel):
    CreationDate: Optional[YearMonthDay] = None
    DimensionalValueCount: Optional[NonNegativeInteger] = None
    LastEvaluatedDate: Optional[YearMonthDay] = None
    LastUpdatedDate: Optional[YearMonthDay] = None
    MonitorArn: Optional[GenericString] = None
    MonitorDimension_1: Optional[MonitorDimension] = Field(
        None, alias='MonitorDimension'
    )
    MonitorName: GenericString
    MonitorSpecification: Optional[Expression] = None
    MonitorType_1: MonitorType = Field(..., alias='MonitorType')


class AnomalyMonitors(RootModel[List[AnomalyMonitor]]):
    root: List[AnomalyMonitor]


class AnomalySubscription(BaseModel):
    AccountId: Optional[GenericString] = None
    Frequency: AnomalySubscriptionFrequency
    MonitorArnList_1: MonitorArnList = Field(..., alias='MonitorArnList')
    Subscribers_1: Subscribers = Field(..., alias='Subscribers')
    SubscriptionArn: Optional[GenericString] = None
    SubscriptionName: GenericString
    Threshold: Optional[NullableNonNegativeDouble] = None
    ThresholdExpression: Optional[Expression] = None


class AnomalySubscriptions(RootModel[List[AnomalySubscription]]):
    root: List[AnomalySubscription]


class CostCategory(BaseModel):
    CostCategoryArn: Arn
    DefaultValue: Optional[CostCategoryValue] = None
    EffectiveEnd: Optional[ZonedDateTime] = None
    EffectiveStart: ZonedDateTime
    Name: CostCategoryName
    ProcessingStatus: Optional[CostCategoryProcessingStatusList] = None
    RuleVersion: CostCategoryRuleVersion
    Rules: CostCategoryRulesList
    SplitChargeRules: Optional[CostCategorySplitChargeRulesList] = None


class CostCategoryRule(BaseModel):
    InheritedValue: Optional[CostCategoryInheritedValueDimension] = None
    Rule: Optional[Expression] = None
    Type: Optional[CostCategoryRuleType] = None
    Value: Optional[CostCategoryValue] = None


class CostCategoryRulesList(RootModel[List[CostCategoryRule]]):
    root: List[CostCategoryRule] = Field(..., max_length=500, min_length=1)


class CreateAnomalyMonitorRequest(BaseModel):
    AnomalyMonitor_1: AnomalyMonitor = Field(..., alias='AnomalyMonitor')
    ResourceTags: Optional[ResourceTagList] = None


class CreateAnomalySubscriptionRequest(BaseModel):
    AnomalySubscription_1: AnomalySubscription = Field(..., alias='AnomalySubscription')
    ResourceTags: Optional[ResourceTagList] = None


class CreateCostCategoryDefinitionRequest(BaseModel):
    DefaultValue: Optional[CostCategoryValue] = None
    EffectiveStart: Optional[ZonedDateTime] = None
    Name: CostCategoryName
    ResourceTags: Optional[ResourceTagList] = None
    RuleVersion: CostCategoryRuleVersion
    Rules: CostCategoryRulesList
    SplitChargeRules: Optional[CostCategorySplitChargeRulesList] = None


class DescribeCostCategoryDefinitionResponse(BaseModel):
    CostCategory_1: Optional[CostCategory] = Field(None, alias='CostCategory')


class Expression(BaseModel):
    And: Optional[Expressions] = None
    CostCategories: Optional[CostCategoryValues] = None
    Dimensions: Optional[DimensionValues] = None
    Not: Optional[Expression] = None
    Or: Optional[Expressions] = None
    Tags: Optional[TagValues] = None


class Expressions(RootModel[List[Expression]]):
    root: List[Expression]


class GetAnomalyMonitorsResponse(BaseModel):
    AnomalyMonitors_1: AnomalyMonitors = Field(..., alias='AnomalyMonitors')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')


class GetAnomalySubscriptionsResponse(BaseModel):
    AnomalySubscriptions_1: AnomalySubscriptions = Field(
        ..., alias='AnomalySubscriptions'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')


class GetCostAndUsageRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Granularity = Field(..., alias='Granularity')
    GroupBy: Optional[GroupDefinitions] = None
    Metrics: MetricNames
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    TimePeriod: DateInterval


class GetCostAndUsageWithResourcesRequest(BaseModel):
    Filter: Expression
    Granularity_1: Granularity = Field(..., alias='Granularity')
    GroupBy: Optional[GroupDefinitions] = None
    Metrics: Optional[MetricNames] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    TimePeriod: DateInterval


class GetCostCategoriesRequest(BaseModel):
    CostCategoryName_1: Optional[CostCategoryName] = Field(
        None, alias='CostCategoryName'
    )
    Filter: Optional[Expression] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SearchString_1: Optional[SearchString] = Field(None, alias='SearchString')
    SortBy: Optional[SortDefinitions] = None
    TimePeriod: DateInterval


class GetCostForecastRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Granularity = Field(..., alias='Granularity')
    Metric_1: Metric = Field(..., alias='Metric')
    PredictionIntervalLevel_1: Optional[PredictionIntervalLevel] = Field(
        None, alias='PredictionIntervalLevel'
    )
    TimePeriod: DateInterval


class GetDimensionValuesRequest(BaseModel):
    Context_1: Optional[Context] = Field(None, alias='Context')
    Dimension_1: Dimension = Field(..., alias='Dimension')
    Filter: Optional[Expression] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SearchString_1: Optional[SearchString] = Field(None, alias='SearchString')
    SortBy: Optional[SortDefinitions] = None
    TimePeriod: DateInterval


class GetReservationCoverageRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Optional[Granularity] = Field(None, alias='Granularity')
    GroupBy: Optional[GroupDefinitions] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    Metrics: Optional[MetricNames] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SortBy: Optional[SortDefinition] = None
    TimePeriod: DateInterval


class GetReservationPurchaseRecommendationRequest(BaseModel):
    AccountId: Optional[GenericString] = None
    AccountScope_1: Optional[AccountScope] = Field(None, alias='AccountScope')
    Filter: Optional[Expression] = None
    LookbackPeriodInDays_1: Optional[LookbackPeriodInDays] = Field(
        None, alias='LookbackPeriodInDays'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    PageSize: Optional[NonNegativeInteger] = None
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    Service: GenericString
    ServiceSpecification_1: Optional[ServiceSpecification] = Field(
        None, alias='ServiceSpecification'
    )
    TermInYears_1: Optional[TermInYears] = Field(None, alias='TermInYears')


class GetReservationUtilizationRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Optional[Granularity] = Field(None, alias='Granularity')
    GroupBy: Optional[GroupDefinitions] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SortBy: Optional[SortDefinition] = None
    TimePeriod: DateInterval


class GetRightsizingRecommendationRequest(BaseModel):
    Configuration: Optional[RightsizingRecommendationConfiguration] = None
    Filter: Optional[Expression] = None
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    PageSize: Optional[NonNegativeInteger] = None
    Service: GenericString


class GetSavingsPlansCoverageRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Optional[Granularity] = Field(None, alias='Granularity')
    GroupBy: Optional[GroupDefinitions] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    Metrics: Optional[MetricNames] = None
    NextToken: Optional[NextPageToken] = None
    SortBy: Optional[SortDefinition] = None
    TimePeriod: DateInterval


class GetSavingsPlansPurchaseRecommendationRequest(BaseModel):
    AccountScope_1: Optional[AccountScope] = Field(None, alias='AccountScope')
    Filter: Optional[Expression] = None
    LookbackPeriodInDays_1: LookbackPeriodInDays = Field(
        ..., alias='LookbackPeriodInDays'
    )
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    PageSize: Optional[NonNegativeInteger] = None
    PaymentOption_1: PaymentOption = Field(..., alias='PaymentOption')
    SavingsPlansType: SupportedSavingsPlansType
    TermInYears_1: TermInYears = Field(..., alias='TermInYears')


class GetSavingsPlansUtilizationDetailsRequest(BaseModel):
    DataType: Optional[SavingsPlansDataTypes] = None
    Filter: Optional[Expression] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[NextPageToken] = None
    SortBy: Optional[SortDefinition] = None
    TimePeriod: DateInterval


class GetSavingsPlansUtilizationRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Optional[Granularity] = Field(None, alias='Granularity')
    SortBy: Optional[SortDefinition] = None
    TimePeriod: DateInterval


class GetTagsRequest(BaseModel):
    Filter: Optional[Expression] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextPageToken_1: Optional[NextPageToken] = Field(None, alias='NextPageToken')
    SearchString_1: Optional[SearchString] = Field(None, alias='SearchString')
    SortBy: Optional[SortDefinitions] = None
    TagKey_1: Optional[TagKey] = Field(None, alias='TagKey')
    TimePeriod: DateInterval


class GetUsageForecastRequest(BaseModel):
    Filter: Optional[Expression] = None
    Granularity_1: Granularity = Field(..., alias='Granularity')
    Metric_1: Metric = Field(..., alias='Metric')
    PredictionIntervalLevel_1: Optional[PredictionIntervalLevel] = Field(
        None, alias='PredictionIntervalLevel'
    )
    TimePeriod: DateInterval


class UpdateAnomalySubscriptionRequest(BaseModel):
    Frequency: Optional[AnomalySubscriptionFrequency] = None
    MonitorArnList_1: Optional[MonitorArnList] = Field(None, alias='MonitorArnList')
    Subscribers_1: Optional[Subscribers] = Field(None, alias='Subscribers')
    SubscriptionArn: GenericString
    SubscriptionName: Optional[GenericString] = None
    Threshold: Optional[NullableNonNegativeDouble] = None
    ThresholdExpression: Optional[Expression] = None


class UpdateCostCategoryDefinitionRequest(BaseModel):
    CostCategoryArn: Arn
    DefaultValue: Optional[CostCategoryValue] = None
    EffectiveStart: Optional[ZonedDateTime] = None
    RuleVersion: CostCategoryRuleVersion
    Rules: CostCategoryRulesList
    SplitChargeRules: Optional[CostCategorySplitChargeRulesList] = None


AnomalyMonitor.model_rebuild()
AnomalySubscription.model_rebuild()
CostCategory.model_rebuild()
CostCategoryRule.model_rebuild()
Expression.model_rebuild()
